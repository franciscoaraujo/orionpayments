version: '3.8'

services:
  # Zookeeper is a dependency for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orionpay-db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Redis for Caching and Idempotency
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  # Our Authorization Service Application
 # servico-autorizacao:
 #   build: .
 #   container_name: servico-autorizacao
 #   depends_on:
 ##     - postgres
 #     - redis
 ##     - kafka
  #  ports:
  #    - "8080:8080"
  #  environment:
  #    - DB_HOST=postgres
  #    - DB_PORT=5432
  #    - DB_NAME=orionpay
  #    # In a real scenario, username and password would come from a secret store
  #    - SPRING_DATASOURCE_USERNAME=user
  ##    - SPRING_DATASOURCE_PASSWORD=password
    #  - SPRING_DATA_REDIS_HOST=redis
    #  - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:29092

volumes:
  postgres-data: